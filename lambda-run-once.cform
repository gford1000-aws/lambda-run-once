{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Invoke a specified Lambda function once, after a specified interval",
  "Parameters": {
    "DelayInterval" : {
      "Description" : "Interval until Lambda is triggered",
      "Type" : "String",
      "Default" : "1 minute",
      "AllowedValues" : [ "1 minute", "2 minutes", "5 minutes", "10 minutes", "30 minutes", "1 hour" ]
    },
    "LambdaArn" : {
      "Description" : "The Arn of the Lambda function to be invoked",
      "Type" : "String"
    }
  },
  "Resources": {
    "ScheduledRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": { "Fn::Sub" : [ "Run-once trigger of ${Lambda}", { "Lambda" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ":", { "Ref" : "LambdaArn" } ] } ] } } ] },
        "Name" : { "Ref" : "AWS::StackName" },
        "ScheduleExpression": { "Fn::Sub" : [ "rate(${Interval})", { "Interval" : { "Ref" : "DelayInterval" } } ] },
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": [ "Lambda", "Arn" ] },
          "Id": { "Ref": "Lambda" } 
        }]
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn" : [ "ScheduledRule", "Lambda" ],
      "Properties": {
        "FunctionName": { "Ref": "Lambda" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": [ "ScheduledRule", "Arn" ] }
      }
    },
    "Lambda" : {
      "Type": "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "ZipFile" : {
            "Fn::Join": [
              "\n",
              [
                "# Async fire of specified lambda, then disables its own Scheduled Rule",
                "import boto3",
                "import os",
                "",
                "RULE_NAME = os.environ['RuleName']",
                "FUNCTION_NAME = os.environ['FunctionName']",
                "",
                "def stop_rule():",
                "    client = boto3.client('events')",
                "    client.disable_rule(Name=RULE_NAME)",
                "",
                "def trigger_ttl():",
                "    client = boto3.client('lambda')",
                "    response = client.invoke(",
                "        FunctionName=FUNCTION_NAME,",
                "        InvocationType='Event',",
                "        LogType='None')",
                "    print(response)",
                "",
                "def lambda_handler(event, context):",
                "    print(event)",
                "    stop_rule()",
                "    trigger_ttl()",
                ""
             ]
            ]
          }          
        },
        "Description" : { "Fn::Sub" : [ "Run-once Lambda that invokes ${Lambda}", { "Lambda" : { "Fn::Select" : [ "6", { "Fn::Split" : [ ":", { "Ref" : "LambdaArn" } ] } ] } } ] },
        "Environment" : {
            "Variables" : {
                "RuleName" : { "Ref" : "AWS::StackName" },
                "FunctionName" : { "Ref" : "LambdaArn" }
            }
        },
        "Handler" : "index.lambda_handler",
        "MemorySize" : 128,
        "Role" : { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
        "Runtime" : "python2.7",
        "Timeout" : 5
      }
    },
    "LambdaLogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : { "Fn::Sub" : [ "/aws/lambda/${Name}", { "Name" : { "Ref" : "Lambda" } } ] },
        "RetentionInDays" : "7"
      }
    },
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "events:DisableRule"
                  ],
                  "Resource": { 
                    "Fn::Sub" : [ 
                      "arn:aws:events:${Region}:${Account}:rule/${Name}",
                      {
                        "Region" : { "Ref" : "AWS::Region" },
                        "Account" : { "Ref" : "AWS::AccountId" },
                        "Name" : { "Ref" : "AWS::StackName" }
                      }
                    ] 
                  },
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": { "Ref" : "LambdaArn" },
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    }
  }
}